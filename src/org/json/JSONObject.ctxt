#BlueJ class context
comment0.params=
comment0.target=JSONObject()
comment0.text=\r\n\ Construct\ an\ empty\ JSONObject.\r\n
comment1.params=jo\ names
comment1.target=JSONObject(org.json.JSONObject,\ java.lang.String[])
comment1.text=\r\n\ Construct\ a\ JSONObject\ from\ a\ subset\ of\ another\ JSONObject.\ An\ array\ of\r\n\ strings\ is\ used\ to\ identify\ the\ keys\ that\ should\ be\ copied.\ Missing\ keys\r\n\ are\ ignored.\r\n\r\n\ @param\ jo\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ JSONObject.\r\n\ @param\ names\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ array\ of\ strings.\r\n
comment10.params=key
comment10.target=java.lang.Object\ get(java.lang.String)
comment10.text=\r\n\ Get\ the\ value\ object\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ object\ associated\ with\ the\ key.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ not\ found.\r\n
comment11.params=clazz\ key
comment11.target=java.lang.Enum\ getEnum(java.lang.Class,\ java.lang.String)
comment11.text=\r\n\ Get\ the\ enum\ value\ associated\ with\ a\ key.\r\n\ \r\n\ @param\ clazz\r\n\ \ \ \ \ \ \ \ \ \ \ The\ type\ of\ enum\ to\ retrieve.\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ enum\ value\ associated\ with\ the\ key\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ to\ an\ enum.\r\n
comment12.params=key
comment12.target=boolean\ getBoolean(java.lang.String)
comment12.text=\r\n\ Get\ the\ boolean\ value\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ truth.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ value\ is\ not\ a\ Boolean\ or\ the\ String\ "true"\ or\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ "false".\r\n
comment13.params=key
comment13.target=java.math.BigInteger\ getBigInteger(java.lang.String)
comment13.text=\r\n\ Get\ the\ BigInteger\ value\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ numeric\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ be\ converted\ to\ BigInteger.\r\n
comment14.params=key
comment14.target=java.math.BigDecimal\ getBigDecimal(java.lang.String)
comment14.text=\r\n\ Get\ the\ BigDecimal\ value\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ numeric\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ not\ found\ or\ if\ the\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ cannot\ be\ converted\ to\ BigDecimal.\r\n
comment15.params=key
comment15.target=double\ getDouble(java.lang.String)
comment15.text=\r\n\ Get\ the\ double\ value\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ numeric\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ not\ found\ or\ if\ the\ value\ is\ not\ a\ Number\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ object\ and\ cannot\ be\ converted\ to\ a\ number.\r\n
comment16.params=key
comment16.target=int\ getInt(java.lang.String)
comment16.text=\r\n\ Get\ the\ int\ value\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ integer\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ to\ an\ integer.\r\n
comment17.params=key
comment17.target=org.json.JSONObject\ getJSONObject(java.lang.String)
comment17.text=\r\n\ Get\ the\ JSONObject\ value\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ A\ JSONObject\ which\ is\ the\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ not\ found\ or\ if\ the\ value\ is\ not\ a\ JSONObject.\r\n
comment18.params=key
comment18.target=long\ getLong(java.lang.String)
comment18.text=\r\n\ Get\ the\ long\ value\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ long\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ to\ a\ long.\r\n
comment19.params=jo
comment19.target=java.lang.String[]\ getNames(org.json.JSONObject)
comment19.text=\r\n\ Get\ an\ array\ of\ field\ names\ from\ a\ JSONObject.\r\n\r\n\ @return\ An\ array\ of\ field\ names,\ or\ null\ if\ there\ are\ no\ names.\r\n
comment2.params=map
comment2.target=JSONObject(java.util.Map)
comment2.text=\r\n\ Construct\ a\ JSONObject\ from\ a\ Map.\r\n\r\n\ @param\ map\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ map\ object\ that\ can\ be\ used\ to\ initialize\ the\ contents\ of\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ JSONObject.\r\n
comment20.params=object
comment20.target=java.lang.String[]\ getNames(java.lang.Object)
comment20.text=\r\n\ Get\ an\ array\ of\ field\ names\ from\ an\ Object.\r\n\r\n\ @return\ An\ array\ of\ field\ names,\ or\ null\ if\ there\ are\ no\ names.\r\n
comment21.params=key
comment21.target=java.lang.String\ getString(java.lang.String)
comment21.text=\r\n\ Get\ the\ string\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ A\ string\ which\ is\ the\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ there\ is\ no\ string\ value\ for\ the\ key.\r\n
comment22.params=key
comment22.target=boolean\ has(java.lang.String)
comment22.text=\r\n\ Determine\ if\ the\ JSONObject\ contains\ a\ specific\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ true\ if\ the\ key\ exists\ in\ the\ JSONObject.\r\n
comment23.params=key
comment23.target=org.json.JSONObject\ increment(java.lang.String)
comment23.text=\r\n\ Increment\ a\ property\ of\ a\ JSONObject.\ If\ there\ is\ no\ such\ property,\r\n\ create\ one\ with\ a\ value\ of\ 1.\ If\ there\ is\ such\ a\ property,\ and\ if\ it\ is\r\n\ an\ Integer,\ Long,\ Double,\ or\ Float,\ then\ add\ one\ to\ it.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ already\ a\ property\ with\ this\ name\ that\ is\ not\ an\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ Integer,\ Long,\ Double,\ or\ Float.\r\n
comment24.params=key
comment24.target=boolean\ isNull(java.lang.String)
comment24.text=\r\n\ Determine\ if\ the\ value\ associated\ with\ the\ key\ is\ null\ or\ if\ there\ is\ no\r\n\ value.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ true\ if\ there\ is\ no\ value\ associated\ with\ the\ key\ or\ if\ the\ value\r\n\ \ \ \ \ \ \ \ \ is\ the\ JSONObject.NULL\ object.\r\n
comment25.params=
comment25.target=java.util.Iterator\ keys()
comment25.text=\r\n\ Get\ an\ enumeration\ of\ the\ keys\ of\ the\ JSONObject.\r\n\r\n\ @return\ An\ iterator\ of\ the\ keys.\r\n
comment26.params=
comment26.target=java.util.Set\ keySet()
comment26.text=\r\n\ Get\ a\ set\ of\ keys\ of\ the\ JSONObject.\r\n\r\n\ @return\ A\ keySet.\r\n
comment27.params=
comment27.target=int\ length()
comment27.text=\r\n\ Get\ the\ number\ of\ keys\ stored\ in\ the\ JSONObject.\r\n\r\n\ @return\ The\ number\ of\ keys\ in\ the\ JSONObject.\r\n
comment28.params=number
comment28.target=java.lang.String\ numberToString(java.lang.Number)
comment28.text=\r\n\ Produce\ a\ string\ from\ a\ Number.\r\n\r\n\ @param\ number\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Number\r\n\ @return\ A\ String.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ n\ is\ a\ non-finite\ number.\r\n
comment29.params=key
comment29.target=java.lang.Object\ opt(java.lang.String)
comment29.text=\r\n\ Get\ an\ optional\ value\ associated\ with\ a\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ An\ object\ which\ is\ the\ value,\ or\ null\ if\ there\ is\ no\ value.\r\n
comment3.params=bean
comment3.target=JSONObject(java.lang.Object)
comment3.text=\r\n\ Construct\ a\ JSONObject\ from\ an\ Object\ using\ bean\ getters.\ It\ reflects\ on\r\n\ all\ of\ the\ public\ methods\ of\ the\ object.\ For\ each\ of\ the\ methods\ with\ no\r\n\ parameters\ and\ a\ name\ starting\ with\ <code>"get"</code>\ or\r\n\ <code>"is"</code>\ followed\ by\ an\ uppercase\ letter,\ the\ method\ is\ invoked,\r\n\ and\ a\ key\ and\ the\ value\ returned\ from\ the\ getter\ method\ are\ put\ into\ the\r\n\ new\ JSONObject.\r\n\r\n\ The\ key\ is\ formed\ by\ removing\ the\ <code>"get"</code>\ or\ <code>"is"</code>\r\n\ prefix.\ If\ the\ second\ remaining\ character\ is\ not\ upper\ case,\ then\ the\r\n\ first\ character\ is\ converted\ to\ lower\ case.\r\n\r\n\ For\ example,\ if\ an\ object\ has\ a\ method\ named\ <code>"getName"</code>,\ and\r\n\ if\ the\ result\ of\ calling\ <code>object.getName()</code>\ is\r\n\ <code>"Larry\ Fine"</code>,\ then\ the\ JSONObject\ will\ contain\r\n\ <code>"name"\:\ "Larry\ Fine"</code>.\r\n\r\n\ @param\ bean\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ object\ that\ has\ getter\ methods\ that\ should\ be\ used\ to\ make\r\n\ \ \ \ \ \ \ \ \ \ \ \ a\ JSONObject.\r\n
comment30.params=clazz\ key
comment30.target=java.lang.Enum\ optEnum(java.lang.Class,\ java.lang.String)
comment30.text=\r\n\ Get\ the\ enum\ value\ associated\ with\ a\ key.\r\n\ \r\n\ @param\ clazz\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ type\ of\ enum\ to\ retrieve.\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ enum\ value\ associated\ with\ the\ key\ or\ null\ if\ not\ found\r\n
comment31.params=clazz\ key\ defaultValue
comment31.target=java.lang.Enum\ optEnum(java.lang.Class,\ java.lang.String,\ java.lang.Enum)
comment31.text=\r\n\ Get\ the\ enum\ value\ associated\ with\ a\ key.\r\n\ \r\n\ @param\ clazz\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ type\ of\ enum\ to\ retrieve.\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ in\ case\ the\ value\ is\ not\ found\r\n\ @return\ The\ enum\ value\ associated\ with\ the\ key\ or\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ the\ value\ is\ not\ found\ or\ cannot\ be\ assigned\ to\ clazz\r\n
comment32.params=key
comment32.target=boolean\ optBoolean(java.lang.String)
comment32.text=\r\n\ Get\ an\ optional\ boolean\ associated\ with\ a\ key.\ It\ returns\ false\ if\ there\r\n\ is\ no\ such\ key,\ or\ if\ the\ value\ is\ not\ Boolean.TRUE\ or\ the\ String\ "true".\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ The\ truth.\r\n
comment33.params=key\ defaultValue
comment33.target=boolean\ optBoolean(java.lang.String,\ boolean)
comment33.text=\r\n\ Get\ an\ optional\ boolean\ associated\ with\ a\ key.\ It\ returns\ the\r\n\ defaultValue\ if\ there\ is\ no\ such\ key,\ or\ if\ it\ is\ not\ a\ Boolean\ or\ the\r\n\ String\ "true"\ or\ "false"\ (case\ insensitive).\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default.\r\n\ @return\ The\ truth.\r\n
comment34.params=key
comment34.target=double\ optDouble(java.lang.String)
comment34.text=\r\n\ Get\ an\ optional\ double\ associated\ with\ a\ key,\ or\ NaN\ if\ there\ is\ no\ such\r\n\ key\ or\ if\ its\ value\ is\ not\ a\ number.\ If\ the\ value\ is\ a\ string,\ an\ attempt\r\n\ will\ be\ made\ to\ evaluate\ it\ as\ a\ number.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ string\ which\ is\ the\ key.\r\n\ @return\ An\ object\ which\ is\ the\ value.\r\n
comment35.params=key\ defaultValue
comment35.target=java.math.BigInteger\ optBigInteger(java.lang.String,\ java.math.BigInteger)
comment35.text=\r\n\ Get\ an\ optional\ BigInteger\ associated\ with\ a\ key,\ or\ the\ defaultValue\ if\r\n\ there\ is\ no\ such\ key\ or\ if\ its\ value\ is\ not\ a\ number.\ If\ the\ value\ is\ a\r\n\ string,\ an\ attempt\ will\ be\ made\ to\ evaluate\ it\ as\ a\ number.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default.\r\n\ @return\ An\ object\ which\ is\ the\ value.\r\n
comment36.params=key\ defaultValue
comment36.target=java.math.BigDecimal\ optBigDecimal(java.lang.String,\ java.math.BigDecimal)
comment36.text=\r\n\ Get\ an\ optional\ BigDecimal\ associated\ with\ a\ key,\ or\ the\ defaultValue\ if\r\n\ there\ is\ no\ such\ key\ or\ if\ its\ value\ is\ not\ a\ number.\ If\ the\ value\ is\ a\r\n\ string,\ an\ attempt\ will\ be\ made\ to\ evaluate\ it\ as\ a\ number.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default.\r\n\ @return\ An\ object\ which\ is\ the\ value.\r\n
comment37.params=key\ defaultValue
comment37.target=double\ optDouble(java.lang.String,\ double)
comment37.text=\r\n\ Get\ an\ optional\ double\ associated\ with\ a\ key,\ or\ the\ defaultValue\ if\r\n\ there\ is\ no\ such\ key\ or\ if\ its\ value\ is\ not\ a\ number.\ If\ the\ value\ is\ a\r\n\ string,\ an\ attempt\ will\ be\ made\ to\ evaluate\ it\ as\ a\ number.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default.\r\n\ @return\ An\ object\ which\ is\ the\ value.\r\n
comment38.params=key
comment38.target=int\ optInt(java.lang.String)
comment38.text=\r\n\ Get\ an\ optional\ int\ value\ associated\ with\ a\ key,\ or\ zero\ if\ there\ is\ no\r\n\ such\ key\ or\ if\ the\ value\ is\ not\ a\ number.\ If\ the\ value\ is\ a\ string,\ an\r\n\ attempt\ will\ be\ made\ to\ evaluate\ it\ as\ a\ number.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ An\ object\ which\ is\ the\ value.\r\n
comment39.params=key\ defaultValue
comment39.target=int\ optInt(java.lang.String,\ int)
comment39.text=\r\n\ Get\ an\ optional\ int\ value\ associated\ with\ a\ key,\ or\ the\ default\ if\ there\r\n\ is\ no\ such\ key\ or\ if\ the\ value\ is\ not\ a\ number.\ If\ the\ value\ is\ a\ string,\r\n\ an\ attempt\ will\ be\ made\ to\ evaluate\ it\ as\ a\ number.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default.\r\n\ @return\ An\ object\ which\ is\ the\ value.\r\n
comment4.params=object\ names
comment4.target=JSONObject(java.lang.Object,\ java.lang.String[])
comment4.text=\r\n\ Construct\ a\ JSONObject\ from\ an\ Object,\ using\ reflection\ to\ find\ the\r\n\ public\ members.\ The\ resulting\ JSONObject's\ keys\ will\ be\ the\ strings\ from\r\n\ the\ names\ array,\ and\ the\ values\ will\ be\ the\ field\ values\ associated\ with\r\n\ those\ keys\ in\ the\ object.\ If\ a\ key\ is\ not\ found\ or\ not\ visible,\ then\ it\r\n\ will\ not\ be\ copied\ into\ the\ new\ JSONObject.\r\n\r\n\ @param\ object\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ object\ that\ has\ fields\ that\ should\ be\ used\ to\ make\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ JSONObject.\r\n\ @param\ names\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ array\ of\ strings,\ the\ names\ of\ the\ fields\ to\ be\ obtained\r\n\ \ \ \ \ \ \ \ \ \ \ \ from\ the\ object.\r\n
comment40.params=key
comment40.target=org.json.JSONObject\ optJSONObject(java.lang.String)
comment40.text=\r\n\ Get\ an\ optional\ JSONObject\ associated\ with\ a\ key.\ It\ returns\ null\ if\r\n\ there\ is\ no\ such\ key,\ or\ if\ its\ value\ is\ not\ a\ JSONObject.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ A\ JSONObject\ which\ is\ the\ value.\r\n
comment41.params=key
comment41.target=long\ optLong(java.lang.String)
comment41.text=\r\n\ Get\ an\ optional\ long\ value\ associated\ with\ a\ key,\ or\ zero\ if\ there\ is\ no\r\n\ such\ key\ or\ if\ the\ value\ is\ not\ a\ number.\ If\ the\ value\ is\ a\ string,\ an\r\n\ attempt\ will\ be\ made\ to\ evaluate\ it\ as\ a\ number.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ An\ object\ which\ is\ the\ value.\r\n
comment42.params=key\ defaultValue
comment42.target=long\ optLong(java.lang.String,\ long)
comment42.text=\r\n\ Get\ an\ optional\ long\ value\ associated\ with\ a\ key,\ or\ the\ default\ if\ there\r\n\ is\ no\ such\ key\ or\ if\ the\ value\ is\ not\ a\ number.\ If\ the\ value\ is\ a\ string,\r\n\ an\ attempt\ will\ be\ made\ to\ evaluate\ it\ as\ a\ number.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default.\r\n\ @return\ An\ object\ which\ is\ the\ value.\r\n
comment43.params=key
comment43.target=java.lang.String\ optString(java.lang.String)
comment43.text=\r\n\ Get\ an\ optional\ string\ associated\ with\ a\ key.\ It\ returns\ an\ empty\ string\r\n\ if\ there\ is\ no\ such\ key.\ If\ the\ value\ is\ not\ a\ string\ and\ is\ not\ null,\r\n\ then\ it\ is\ converted\ to\ a\ string.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @return\ A\ string\ which\ is\ the\ value.\r\n
comment44.params=key\ defaultValue
comment44.target=java.lang.String\ optString(java.lang.String,\ java.lang.String)
comment44.text=\r\n\ Get\ an\ optional\ string\ associated\ with\ a\ key.\ It\ returns\ the\ defaultValue\r\n\ if\ there\ is\ no\ such\ key.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default.\r\n\ @return\ A\ string\ which\ is\ the\ value.\r\n
comment45.params=bean
comment45.target=void\ populateMap(java.lang.Object)
comment46.params=key\ value
comment46.target=org.json.JSONObject\ put(java.lang.String,\ boolean)
comment46.text=\r\n\ Put\ a\ key/boolean\ pair\ in\ the\ JSONObject.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ boolean\ which\ is\ the\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ null.\r\n
comment47.params=key\ value
comment47.target=org.json.JSONObject\ put(java.lang.String,\ java.util.Collection)
comment47.text=\r\n\ Put\ a\ key/value\ pair\ in\ the\ JSONObject,\ where\ the\ value\ will\ be\ a\r\n\ JSONArray\ which\ is\ produced\ from\ a\ Collection.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Collection\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n
comment48.params=key\ value
comment48.target=org.json.JSONObject\ put(java.lang.String,\ double)
comment48.text=\r\n\ Put\ a\ key/double\ pair\ in\ the\ JSONObject.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ double\ which\ is\ the\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ null\ or\ if\ the\ number\ is\ invalid.\r\n
comment49.params=key\ value
comment49.target=org.json.JSONObject\ put(java.lang.String,\ int)
comment49.text=\r\n\ Put\ a\ key/int\ pair\ in\ the\ JSONObject.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ int\ which\ is\ the\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ null.\r\n
comment5.params=source
comment5.target=JSONObject(java.lang.String)
comment5.text=\r\n\ Construct\ a\ JSONObject\ from\ a\ source\ JSON\ text\ string.\ This\ is\ the\ most\r\n\ commonly\ used\ JSONObject\ constructor.\r\n\r\n\ @param\ source\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ string\ beginning\ with\ <code>{</code>&nbsp;<small>(left\r\n\ \ \ \ \ \ \ \ \ \ \ \ brace)</small>\ and\ ending\ with\ <code>}</code>\r\n\ \ \ \ \ \ \ \ \ \ \ \ &nbsp;<small>(right\ brace)</small>.\r\n\ @exception\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ a\ syntax\ error\ in\ the\ source\ string\ or\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ duplicated\ key.\r\n
comment50.params=key\ value
comment50.target=org.json.JSONObject\ put(java.lang.String,\ long)
comment50.text=\r\n\ Put\ a\ key/long\ pair\ in\ the\ JSONObject.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ long\ which\ is\ the\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ null.\r\n
comment51.params=key\ value
comment51.target=org.json.JSONObject\ put(java.lang.String,\ java.util.Map)
comment51.text=\r\n\ Put\ a\ key/value\ pair\ in\ the\ JSONObject,\ where\ the\ value\ will\ be\ a\r\n\ JSONObject\ which\ is\ produced\ from\ a\ Map.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Map\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n
comment52.params=key\ value
comment52.target=org.json.JSONObject\ put(java.lang.String,\ java.lang.Object)
comment52.text=\r\n\ Put\ a\ key/value\ pair\ in\ the\ JSONObject.\ If\ the\ value\ is\ null,\ then\ the\r\n\ key\ will\ be\ removed\ from\ the\ JSONObject\ if\ it\ is\ present.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ object\ which\ is\ the\ value.\ It\ should\ be\ of\ one\ of\ these\r\n\ \ \ \ \ \ \ \ \ \ \ \ types\:\ Boolean,\ Double,\ Integer,\ JSONArray,\ JSONObject,\ Long,\r\n\ \ \ \ \ \ \ \ \ \ \ \ String,\ or\ the\ JSONObject.NULL\ object.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ value\ is\ non-finite\ number\ or\ if\ the\ key\ is\ null.\r\n
comment53.params=key\ value
comment53.target=org.json.JSONObject\ putOnce(java.lang.String,\ java.lang.Object)
comment53.text=\r\n\ Put\ a\ key/value\ pair\ in\ the\ JSONObject,\ but\ only\ if\ the\ key\ and\ the\ value\r\n\ are\ both\ non-null,\ and\ only\ if\ there\ is\ not\ already\ a\ member\ with\ that\r\n\ name.\r\n\r\n\ @param\ key\ string\r\n\ @param\ value\ object\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ a\ duplicate\r\n
comment54.params=key\ value
comment54.target=org.json.JSONObject\ putOpt(java.lang.String,\ java.lang.Object)
comment54.text=\r\n\ Put\ a\ key/value\ pair\ in\ the\ JSONObject,\ but\ only\ if\ the\ key\ and\ the\ value\r\n\ are\ both\ non-null.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ object\ which\ is\ the\ value.\ It\ should\ be\ of\ one\ of\ these\r\n\ \ \ \ \ \ \ \ \ \ \ \ types\:\ Boolean,\ Double,\ Integer,\ JSONArray,\ JSONObject,\ Long,\r\n\ \ \ \ \ \ \ \ \ \ \ \ String,\ or\ the\ JSONObject.NULL\ object.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ value\ is\ a\ non-finite\ number.\r\n
comment55.params=jsonPointer
comment55.target=java.lang.Object\ query(java.lang.String)
comment55.text=\r\n\ Creates\ a\ JSONPointer\ using\ an\ intialization\ string\ and\ tries\ to\ \r\n\ match\ it\ to\ an\ item\ within\ this\ JSONObject.\ For\ example,\ given\ a\r\n\ JSONObject\ initialized\ with\ this\ document\:\r\n\ <pre>\r\n\ {\r\n\ \ \ \ \ "a"\:{"b"\:"c"}\r\n\ }\r\n\ </pre>\r\n\ and\ this\ JSONPointer\ string\:\ \r\n\ <pre>\r\n\ "/a/b"\r\n\ </pre>\r\n\ Then\ this\ method\ will\ return\ the\ String\ "c".\r\n\ A\ JSONPointerException\ may\ be\ thrown\ from\ code\ called\ by\ this\ method.\r\n\ \ \ \r\n\ @param\ jsonPointer\ string\ that\ can\ be\ used\ to\ create\ a\ JSONPointer\r\n\ @return\ the\ item\ matched\ by\ the\ JSONPointer,\ otherwise\ null\r\n
comment56.params=jsonPointer
comment56.target=java.lang.Object\ optQuery(java.lang.String)
comment56.text=\r\n\ Queries\ and\ returns\ a\ value\ from\ this\ object\ using\ {@code\ jsonPointer},\ or\r\n\ returns\ null\ if\ the\ query\ fails\ due\ to\ a\ missing\ key.\r\n\ \r\n\ @param\ jsonPointer\ the\ string\ representation\ of\ the\ JSON\ pointer\r\n\ @return\ the\ queried\ value\ or\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ jsonPointer}\ has\ invalid\ syntax\r\n
comment57.params=string
comment57.target=java.lang.String\ quote(java.lang.String)
comment57.text=\r\n\ Produce\ a\ string\ in\ double\ quotes\ with\ backslash\ sequences\ in\ all\ the\r\n\ right\ places.\ A\ backslash\ will\ be\ inserted\ within\ </,\ producing\ <\\/,\r\n\ allowing\ JSON\ text\ to\ be\ delivered\ in\ HTML.\ In\ JSON\ text,\ a\ string\ cannot\r\n\ contain\ a\ control\ character\ or\ an\ unescaped\ quote\ or\ backslash.\r\n\r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ String\r\n\ @return\ A\ String\ correctly\ formatted\ for\ insertion\ in\ a\ JSON\ text.\r\n
comment58.params=string\ w
comment58.target=java.io.Writer\ quote(java.lang.String,\ java.io.Writer)
comment59.params=key
comment59.target=java.lang.Object\ remove(java.lang.String)
comment59.text=\r\n\ Remove\ a\ name\ and\ its\ value,\ if\ present.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ name\ to\ be\ removed.\r\n\ @return\ The\ value\ that\ was\ associated\ with\ the\ name,\ or\ null\ if\ there\ was\r\n\ \ \ \ \ \ \ \ \ no\ value.\r\n
comment6.params=baseName\ locale
comment6.target=JSONObject(java.lang.String,\ java.util.Locale)
comment6.text=\r\n\ Construct\ a\ JSONObject\ from\ a\ ResourceBundle.\r\n\r\n\ @param\ baseName\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ ResourceBundle\ base\ name.\r\n\ @param\ locale\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ Locale\ to\ load\ the\ ResourceBundle\ for.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ any\ JSONExceptions\ are\ detected.\r\n
comment60.params=other
comment60.target=boolean\ similar(java.lang.Object)
comment60.text=\r\n\ Determine\ if\ two\ JSONObjects\ are\ similar.\r\n\ They\ must\ contain\ the\ same\ set\ of\ names\ which\ must\ be\ associated\ with\r\n\ similar\ values.\r\n\r\n\ @param\ other\ The\ other\ JSONObject\r\n\ @return\ true\ if\ they\ are\ equal\r\n
comment61.params=string
comment61.target=java.lang.Object\ stringToValue(java.lang.String)
comment61.text=\r\n\ Try\ to\ convert\ a\ string\ into\ a\ number,\ boolean,\ or\ null.\ If\ the\ string\r\n\ can't\ be\ converted,\ return\ the\ string.\r\n\r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ String.\r\n\ @return\ A\ simple\ JSON\ value.\r\n
comment62.params=o
comment62.target=void\ testValidity(java.lang.Object)
comment62.text=\r\n\ Throw\ an\ exception\ if\ the\ object\ is\ a\ NaN\ or\ infinite\ number.\r\n\r\n\ @param\ o\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ object\ to\ test.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ o\ is\ a\ non-finite\ number.\r\n
comment63.params=
comment63.target=java.lang.String\ toString()
comment63.text=\r\n\ Make\ a\ JSON\ text\ of\ this\ JSONObject.\ For\ compactness,\ no\ whitespace\ is\r\n\ added.\ If\ this\ would\ not\ result\ in\ a\ syntactically\ correct\ JSON\ text,\r\n\ then\ null\ will\ be\ returned\ instead.\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @return\ a\ printable,\ displayable,\ portable,\ transmittable\ representation\r\n\ \ \ \ \ \ \ \ \ of\ the\ object,\ beginning\ with\ <code>{</code>&nbsp;<small>(left\r\n\ \ \ \ \ \ \ \ \ brace)</small>\ and\ ending\ with\ <code>}</code>&nbsp;<small>(right\r\n\ \ \ \ \ \ \ \ \ brace)</small>.\r\n
comment64.params=indentFactor
comment64.target=java.lang.String\ toString(int)
comment64.text=\r\n\ Make\ a\ prettyprinted\ JSON\ text\ of\ this\ JSONObject.\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @param\ indentFactor\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ number\ of\ spaces\ to\ add\ to\ each\ level\ of\ indentation.\r\n\ @return\ a\ printable,\ displayable,\ portable,\ transmittable\ representation\r\n\ \ \ \ \ \ \ \ \ of\ the\ object,\ beginning\ with\ <code>{</code>&nbsp;<small>(left\r\n\ \ \ \ \ \ \ \ \ brace)</small>\ and\ ending\ with\ <code>}</code>&nbsp;<small>(right\r\n\ \ \ \ \ \ \ \ \ brace)</small>.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ object\ contains\ an\ invalid\ number.\r\n
comment65.params=value
comment65.target=java.lang.String\ valueToString(java.lang.Object)
comment65.text=\r\n\ Make\ a\ JSON\ text\ of\ an\ Object\ value.\ If\ the\ object\ has\ an\r\n\ value.toJSONString()\ method,\ then\ that\ method\ will\ be\ used\ to\ produce\ the\r\n\ JSON\ text.\ The\ method\ is\ required\ to\ produce\ a\ strictly\ conforming\ text.\r\n\ If\ the\ object\ does\ not\ contain\ a\ toJSONString\ method\ (which\ is\ the\ most\r\n\ common\ case),\ then\ a\ text\ will\ be\ produced\ by\ other\ means.\ If\ the\ value\r\n\ is\ an\ array\ or\ Collection,\ then\ a\ JSONArray\ will\ be\ made\ from\ it\ and\ its\r\n\ toJSONString\ method\ will\ be\ called.\ If\ the\ value\ is\ a\ MAP,\ then\ a\r\n\ JSONObject\ will\ be\ made\ from\ it\ and\ its\ toJSONString\ method\ will\ be\r\n\ called.\ Otherwise,\ the\ value's\ toString\ method\ will\ be\ called,\ and\ the\r\n\ result\ will\ be\ quoted.\r\n\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ value\ to\ be\ serialized.\r\n\ @return\ a\ printable,\ displayable,\ transmittable\ representation\ of\ the\r\n\ \ \ \ \ \ \ \ \ object,\ beginning\ with\ <code>{</code>&nbsp;<small>(left\r\n\ \ \ \ \ \ \ \ \ brace)</small>\ and\ ending\ with\ <code>}</code>&nbsp;<small>(right\r\n\ \ \ \ \ \ \ \ \ brace)</small>.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ value\ is\ or\ contains\ an\ invalid\ number.\r\n
comment66.params=object
comment66.target=java.lang.Object\ wrap(java.lang.Object)
comment66.text=\r\n\ Wrap\ an\ object,\ if\ necessary.\ If\ the\ object\ is\ null,\ return\ the\ NULL\r\n\ object.\ If\ it\ is\ an\ array\ or\ collection,\ wrap\ it\ in\ a\ JSONArray.\ If\ it\ is\r\n\ a\ map,\ wrap\ it\ in\ a\ JSONObject.\ If\ it\ is\ a\ standard\ property\ (Double,\r\n\ String,\ et\ al)\ then\ it\ is\ already\ wrapped.\ Otherwise,\ if\ it\ comes\ from\r\n\ one\ of\ the\ java\ packages,\ turn\ it\ into\ a\ string.\ And\ if\ it\ doesn't,\ try\r\n\ to\ wrap\ it\ in\ a\ JSONObject.\ If\ the\ wrapping\ fails,\ then\ null\ is\ returned.\r\n\r\n\ @param\ object\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ object\ to\ wrap\r\n\ @return\ The\ wrapped\ value\r\n
comment67.params=writer
comment67.target=java.io.Writer\ write(java.io.Writer)
comment67.text=\r\n\ Write\ the\ contents\ of\ the\ JSONObject\ as\ JSON\ text\ to\ a\ writer.\ For\r\n\ compactness,\ no\ whitespace\ is\ added.\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @return\ The\ writer.\r\n\ @throws\ JSONException\r\n
comment68.params=writer\ value\ indentFactor\ indent
comment68.target=java.io.Writer\ writeValue(java.io.Writer,\ java.lang.Object,\ int,\ int)
comment69.params=writer\ indent
comment69.target=void\ indent(java.io.Writer,\ int)
comment7.params=key\ value
comment7.target=org.json.JSONObject\ accumulate(java.lang.String,\ java.lang.Object)
comment7.text=\r\n\ Accumulate\ values\ under\ a\ key.\ It\ is\ similar\ to\ the\ put\ method\ except\r\n\ that\ if\ there\ is\ already\ an\ object\ stored\ under\ the\ key\ then\ a\ JSONArray\r\n\ is\ stored\ under\ the\ key\ to\ hold\ all\ of\ the\ accumulated\ values.\ If\ there\r\n\ is\ already\ a\ JSONArray,\ then\ the\ new\ value\ is\ appended\ to\ it.\ In\r\n\ contrast,\ the\ put\ method\ replaces\ the\ previous\ value.\r\n\r\n\ If\ only\ one\ value\ is\ accumulated\ that\ is\ not\ a\ JSONArray,\ then\ the\ result\r\n\ will\ be\ the\ same\ as\ using\ put.\ But\ if\ multiple\ values\ are\ accumulated,\r\n\ then\ the\ result\ will\ be\ like\ append.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ object\ to\ be\ accumulated\ under\ the\ key.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ value\ is\ an\ invalid\ number\ or\ if\ the\ key\ is\ null.\r\n
comment70.params=writer\ indentFactor\ indent
comment70.target=java.io.Writer\ write(java.io.Writer,\ int,\ int)
comment70.text=\r\n\ Write\ the\ contents\ of\ the\ JSONObject\ as\ JSON\ text\ to\ a\ writer.\ For\r\n\ compactness,\ no\ whitespace\ is\ added.\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @param\ writer\r\n\ \ \ \ \ \ \ \ \ \ \ \ Writes\ the\ serialized\ JSON\r\n\ @param\ indentFactor\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ number\ of\ spaces\ to\ add\ to\ each\ level\ of\ indentation.\r\n\ @param\ indent\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ indention\ of\ the\ top\ level.\r\n\ @return\ The\ writer.\r\n\ @throws\ JSONException\r\n
comment71.params=
comment71.target=java.util.Map\ toMap()
comment71.text=\r\n\ Returns\ a\ java.util.Map\ containing\ all\ of\ the\ entries\ in\ this\ object.\r\n\ If\ an\ entry\ in\ the\ object\ is\ a\ JSONArray\ or\ JSONObject\ it\ will\ also\r\n\ be\ converted.\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @return\ a\ java.util.Map\ containing\ the\ entries\ of\ this\ object\r\n
comment8.params=key\ value
comment8.target=org.json.JSONObject\ append(java.lang.String,\ java.lang.Object)
comment8.text=\r\n\ Append\ values\ to\ the\ array\ under\ a\ key.\ If\ the\ key\ does\ not\ exist\ in\ the\r\n\ JSONObject,\ then\ the\ key\ is\ put\ in\ the\ JSONObject\ with\ its\ value\ being\ a\r\n\ JSONArray\ containing\ the\ value\ parameter.\ If\ the\ key\ was\ already\r\n\ associated\ with\ a\ JSONArray,\ then\ the\ value\ parameter\ is\ appended\ to\ it.\r\n\r\n\ @param\ key\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ key\ string.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ object\ to\ be\ accumulated\ under\ the\ key.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ null\ or\ if\ the\ current\ value\ associated\ with\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ the\ key\ is\ not\ a\ JSONArray.\r\n
comment9.params=d
comment9.target=java.lang.String\ doubleToString(double)
comment9.text=\r\n\ Produce\ a\ string\ from\ a\ double.\ The\ string\ "null"\ will\ be\ returned\ if\ the\r\n\ number\ is\ not\ finite.\r\n\r\n\ @param\ d\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ double.\r\n\ @return\ A\ String.\r\n
numComments=72
