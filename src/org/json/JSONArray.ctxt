#BlueJ class context
comment0.params=
comment0.target=JSONArray()
comment0.text=\r\n\ Construct\ an\ empty\ JSONArray.\r\n
comment1.params=x
comment1.target=JSONArray(JSONTokener)
comment1.text=\r\n\ Construct\ a\ JSONArray\ from\ a\ JSONTokener.\r\n\r\n\ @param\ x\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ JSONTokener\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ a\ syntax\ error.\r\n
comment10.params=index
comment10.target=java.math.BigDecimal\ getBigDecimal(int)
comment10.text=\r\n\ Get\ the\ BigDecimal\ value\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ to\ a\ BigDecimal.\r\n
comment11.params=index
comment11.target=java.math.BigInteger\ getBigInteger(int)
comment11.text=\r\n\ Get\ the\ BigInteger\ value\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ to\ a\ BigInteger.\r\n
comment12.params=index
comment12.target=int\ getInt(int)
comment12.text=\r\n\ Get\ the\ int\ value\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ not\ found\ or\ if\ the\ value\ is\ not\ a\ number.\r\n
comment13.params=index
comment13.target=org.json.JSONArray\ getJSONArray(int)
comment13.text=\r\n\ Get\ the\ JSONArray\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ A\ JSONArray\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ no\ value\ for\ the\ index.\ or\ if\ the\ value\ is\ not\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ JSONArray\r\n
comment14.params=index
comment14.target=JSONObject\ getJSONObject(int)
comment14.text=\r\n\ Get\ the\ JSONObject\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ subscript\r\n\ @return\ A\ JSONObject\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ no\ value\ for\ the\ index\ or\ if\ the\ value\ is\ not\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ JSONObject\r\n
comment15.params=index
comment15.target=long\ getLong(int)
comment15.text=\r\n\ Get\ the\ long\ value\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ to\ a\ number.\r\n
comment16.params=index
comment16.target=java.lang.String\ getString(int)
comment16.text=\r\n\ Get\ the\ string\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ A\ string\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ no\ string\ value\ for\ the\ index.\r\n
comment17.params=index
comment17.target=boolean\ isNull(int)
comment17.text=\r\n\ Determine\ if\ the\ value\ is\ null.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ true\ if\ the\ value\ at\ the\ index\ is\ null,\ or\ if\ there\ is\ no\ value.\r\n
comment18.params=separator
comment18.target=java.lang.String\ join(java.lang.String)
comment18.text=\r\n\ Make\ a\ string\ from\ the\ contents\ of\ this\ JSONArray.\ The\r\n\ <code>separator</code>\ string\ is\ inserted\ between\ each\ element.\ Warning\:\r\n\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @param\ separator\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ string\ that\ will\ be\ inserted\ between\ the\ elements.\r\n\ @return\ a\ string.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ array\ contains\ an\ invalid\ number.\r\n
comment19.params=
comment19.target=int\ length()
comment19.text=\r\n\ Get\ the\ number\ of\ elements\ in\ the\ JSONArray,\ included\ nulls.\r\n\r\n\ @return\ The\ length\ (or\ size).\r\n
comment2.params=source
comment2.target=JSONArray(java.lang.String)
comment2.text=\r\n\ Construct\ a\ JSONArray\ from\ a\ source\ JSON\ text.\r\n\r\n\ @param\ source\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ string\ that\ begins\ with\ <code>[</code>&nbsp;<small>(left\r\n\ \ \ \ \ \ \ \ \ \ \ \ bracket)</small>\ and\ ends\ with\ <code>]</code>\r\n\ \ \ \ \ \ \ \ \ \ \ \ &nbsp;<small>(right\ bracket)</small>.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ a\ syntax\ error.\r\n
comment20.params=index
comment20.target=java.lang.Object\ opt(int)
comment20.text=\r\n\ Get\ the\ optional\ object\ value\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ An\ object\ value,\ or\ null\ if\ there\ is\ no\ object\ at\ that\ index.\r\n
comment21.params=index
comment21.target=boolean\ optBoolean(int)
comment21.text=\r\n\ Get\ the\ optional\ boolean\ value\ associated\ with\ an\ index.\ It\ returns\ false\r\n\ if\ there\ is\ no\ value\ at\ that\ index,\ or\ if\ the\ value\ is\ not\ Boolean.TRUE\r\n\ or\ the\ String\ "true".\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ truth.\r\n
comment22.params=index\ defaultValue
comment22.target=boolean\ optBoolean(int,\ boolean)
comment22.text=\r\n\ Get\ the\ optional\ boolean\ value\ associated\ with\ an\ index.\ It\ returns\ the\r\n\ defaultValue\ if\ there\ is\ no\ value\ at\ that\ index\ or\ if\ it\ is\ not\ a\ Boolean\r\n\ or\ the\ String\ "true"\ or\ "false"\ (case\ insensitive).\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ boolean\ default.\r\n\ @return\ The\ truth.\r\n
comment23.params=index
comment23.target=double\ optDouble(int)
comment23.text=\r\n\ Get\ the\ optional\ double\ value\ associated\ with\ an\ index.\ NaN\ is\ returned\r\n\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\ number\ and\r\n\ cannot\ be\ converted\ to\ a\ number.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ value.\r\n
comment24.params=index\ defaultValue
comment24.target=double\ optDouble(int,\ double)
comment24.text=\r\n\ Get\ the\ optional\ double\ value\ associated\ with\ an\ index.\ The\ defaultValue\r\n\ is\ returned\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\r\n\ number\ and\ cannot\ be\ converted\ to\ a\ number.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ subscript\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\r\n\ @return\ The\ value.\r\n
comment25.params=index
comment25.target=int\ optInt(int)
comment25.text=\r\n\ Get\ the\ optional\ int\ value\ associated\ with\ an\ index.\ Zero\ is\ returned\ if\r\n\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\ number\ and\r\n\ cannot\ be\ converted\ to\ a\ number.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ value.\r\n
comment26.params=index\ defaultValue
comment26.target=int\ optInt(int,\ int)
comment26.text=\r\n\ Get\ the\ optional\ int\ value\ associated\ with\ an\ index.\ The\ defaultValue\ is\r\n\ returned\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\r\n\ number\ and\ cannot\ be\ converted\ to\ a\ number.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\r\n\ @return\ The\ value.\r\n
comment27.params=clazz\ index
comment27.target=java.lang.Enum\ optEnum(java.lang.Class,\ int)
comment27.text=\r\n\ Get\ the\ enum\ value\ associated\ with\ a\ key.\r\n\ \r\n\ @param\ clazz\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ type\ of\ enum\ to\ retrieve.\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ enum\ value\ at\ the\ index\ location\ or\ null\ if\ not\ found\r\n
comment28.params=clazz\ index\ defaultValue
comment28.target=java.lang.Enum\ optEnum(java.lang.Class,\ int,\ java.lang.Enum)
comment28.text=\r\n\ Get\ the\ enum\ value\ associated\ with\ a\ key.\r\n\ \r\n\ @param\ clazz\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ type\ of\ enum\ to\ retrieve.\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ in\ case\ the\ value\ is\ not\ found\r\n\ @return\ The\ enum\ value\ at\ the\ index\ location\ or\ defaultValue\ if\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ value\ is\ not\ found\ or\ cannot\ be\ assigned\ to\ clazz\r\n
comment29.params=index\ defaultValue
comment29.target=java.math.BigInteger\ optBigInteger(int,\ java.math.BigInteger)
comment29.text=\r\n\ Get\ the\ optional\ BigInteger\ value\ associated\ with\ an\ index.\ The\ \r\n\ defaultValue\ is\ returned\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ \r\n\ value\ is\ not\ a\ number\ and\ cannot\ be\ converted\ to\ a\ number.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\r\n\ @return\ The\ value.\r\n
comment3.params=collection
comment3.target=JSONArray(java.util.Collection)
comment3.text=\r\n\ Construct\ a\ JSONArray\ from\ a\ Collection.\r\n\r\n\ @param\ collection\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Collection.\r\n
comment30.params=index\ defaultValue
comment30.target=java.math.BigDecimal\ optBigDecimal(int,\ java.math.BigDecimal)
comment30.text=\r\n\ Get\ the\ optional\ BigDecimal\ value\ associated\ with\ an\ index.\ The\ \r\n\ defaultValue\ is\ returned\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ \r\n\ value\ is\ not\ a\ number\ and\ cannot\ be\ converted\ to\ a\ number.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\r\n\ @return\ The\ value.\r\n
comment31.params=index
comment31.target=org.json.JSONArray\ optJSONArray(int)
comment31.text=\r\n\ Get\ the\ optional\ JSONArray\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ subscript\r\n\ @return\ A\ JSONArray\ value,\ or\ null\ if\ the\ index\ has\ no\ value,\ or\ if\ the\r\n\ \ \ \ \ \ \ \ \ value\ is\ not\ a\ JSONArray.\r\n
comment32.params=index
comment32.target=JSONObject\ optJSONObject(int)
comment32.text=\r\n\ Get\ the\ optional\ JSONObject\ associated\ with\ an\ index.\ Null\ is\ returned\ if\r\n\ the\ key\ is\ not\ found,\ or\ null\ if\ the\ index\ has\ no\ value,\ or\ if\ the\ value\r\n\ is\ not\ a\ JSONObject.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ A\ JSONObject\ value.\r\n
comment33.params=index
comment33.target=long\ optLong(int)
comment33.text=\r\n\ Get\ the\ optional\ long\ value\ associated\ with\ an\ index.\ Zero\ is\ returned\ if\r\n\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\ number\ and\r\n\ cannot\ be\ converted\ to\ a\ number.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ value.\r\n
comment34.params=index\ defaultValue
comment34.target=long\ optLong(int,\ long)
comment34.text=\r\n\ Get\ the\ optional\ long\ value\ associated\ with\ an\ index.\ The\ defaultValue\ is\r\n\ returned\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\r\n\ number\ and\ cannot\ be\ converted\ to\ a\ number.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\r\n\ @return\ The\ value.\r\n
comment35.params=index
comment35.target=java.lang.String\ optString(int)
comment35.text=\r\n\ Get\ the\ optional\ string\ value\ associated\ with\ an\ index.\ It\ returns\ an\r\n\ empty\ string\ if\ there\ is\ no\ value\ at\ that\ index.\ If\ the\ value\ is\ not\ a\r\n\ string\ and\ is\ not\ null,\ then\ it\ is\ coverted\ to\ a\ string.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ A\ String\ value.\r\n
comment36.params=index\ defaultValue
comment36.target=java.lang.String\ optString(int,\ java.lang.String)
comment36.text=\r\n\ Get\ the\ optional\ string\ associated\ with\ an\ index.\ The\ defaultValue\ is\r\n\ returned\ if\ the\ key\ is\ not\ found.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @param\ defaultValue\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\r\n\ @return\ A\ String\ value.\r\n
comment37.params=value
comment37.target=org.json.JSONArray\ put(boolean)
comment37.text=\r\n\ Append\ a\ boolean\ value.\ This\ increases\ the\ array's\ length\ by\ one.\r\n\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ boolean\ value.\r\n\ @return\ this.\r\n
comment38.params=value
comment38.target=org.json.JSONArray\ put(java.util.Collection)
comment38.text=\r\n\ Put\ a\ value\ in\ the\ JSONArray,\ where\ the\ value\ will\ be\ a\ JSONArray\ which\r\n\ is\ produced\ from\ a\ Collection.\r\n\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Collection\ value.\r\n\ @return\ this.\r\n
comment39.params=value
comment39.target=org.json.JSONArray\ put(double)
comment39.text=\r\n\ Append\ a\ double\ value.\ This\ increases\ the\ array's\ length\ by\ one.\r\n\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ double\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ value\ is\ not\ finite.\r\n\ @return\ this.\r\n
comment4.params=array
comment4.target=JSONArray(java.lang.Object)
comment4.text=\r\n\ Construct\ a\ JSONArray\ from\ an\ array\r\n\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ not\ an\ array.\r\n
comment40.params=value
comment40.target=org.json.JSONArray\ put(int)
comment40.text=\r\n\ Append\ an\ int\ value.\ This\ increases\ the\ array's\ length\ by\ one.\r\n\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ int\ value.\r\n\ @return\ this.\r\n
comment41.params=value
comment41.target=org.json.JSONArray\ put(long)
comment41.text=\r\n\ Append\ an\ long\ value.\ This\ increases\ the\ array's\ length\ by\ one.\r\n\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ long\ value.\r\n\ @return\ this.\r\n
comment42.params=value
comment42.target=org.json.JSONArray\ put(java.util.Map)
comment42.text=\r\n\ Put\ a\ value\ in\ the\ JSONArray,\ where\ the\ value\ will\ be\ a\ JSONObject\ which\r\n\ is\ produced\ from\ a\ Map.\r\n\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Map\ value.\r\n\ @return\ this.\r\n
comment43.params=value
comment43.target=org.json.JSONArray\ put(java.lang.Object)
comment43.text=\r\n\ Append\ an\ object\ value.\ This\ increases\ the\ array's\ length\ by\ one.\r\n\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ object\ value.\ The\ value\ should\ be\ a\ Boolean,\ Double,\r\n\ \ \ \ \ \ \ \ \ \ \ \ Integer,\ JSONArray,\ JSONObject,\ Long,\ or\ String,\ or\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ JSONObject.NULL\ object.\r\n\ @return\ this.\r\n
comment44.params=index\ value
comment44.target=org.json.JSONArray\ put(int,\ boolean)
comment44.text=\r\n\ Put\ or\ replace\ a\ boolean\ value\ in\ the\ JSONArray.\ If\ the\ index\ is\ greater\r\n\ than\ the\ length\ of\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\r\n\ necessary\ to\ pad\ it\ out.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ boolean\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative.\r\n
comment45.params=index\ value
comment45.target=org.json.JSONArray\ put(int,\ java.util.Collection)
comment45.text=\r\n\ Put\ a\ value\ in\ the\ JSONArray,\ where\ the\ value\ will\ be\ a\ JSONArray\ which\r\n\ is\ produced\ from\ a\ Collection.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Collection\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative\ or\ if\ the\ value\ is\ not\ finite.\r\n
comment46.params=index\ value
comment46.target=org.json.JSONArray\ put(int,\ double)
comment46.text=\r\n\ Put\ or\ replace\ a\ double\ value.\ If\ the\ index\ is\ greater\ than\ the\ length\ of\r\n\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\ necessary\ to\ pad\ it\r\n\ out.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ double\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative\ or\ if\ the\ value\ is\ not\ finite.\r\n
comment47.params=index\ value
comment47.target=org.json.JSONArray\ put(int,\ int)
comment47.text=\r\n\ Put\ or\ replace\ an\ int\ value.\ If\ the\ index\ is\ greater\ than\ the\ length\ of\r\n\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\ necessary\ to\ pad\ it\r\n\ out.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ An\ int\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative.\r\n
comment48.params=index\ value
comment48.target=org.json.JSONArray\ put(int,\ long)
comment48.text=\r\n\ Put\ or\ replace\ a\ long\ value.\ If\ the\ index\ is\ greater\ than\ the\ length\ of\r\n\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\ necessary\ to\ pad\ it\r\n\ out.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ long\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative.\r\n
comment49.params=index\ value
comment49.target=org.json.JSONArray\ put(int,\ java.util.Map)
comment49.text=\r\n\ Put\ a\ value\ in\ the\ JSONArray,\ where\ the\ value\ will\ be\ a\ JSONObject\ that\r\n\ is\ produced\ from\ a\ Map.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ Map\ value.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative\ or\ if\ the\ the\ value\ is\ an\ invalid\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ number.\r\n
comment5.params=
comment5.target=java.util.Iterator\ iterator()
comment50.params=index\ value
comment50.target=org.json.JSONArray\ put(int,\ java.lang.Object)
comment50.text=\r\n\ Put\ or\ replace\ an\ object\ value\ in\ the\ JSONArray.\ If\ the\ index\ is\ greater\r\n\ than\ the\ length\ of\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\r\n\ necessary\ to\ pad\ it\ out.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ value\ to\ put\ into\ the\ array.\ The\ value\ should\ be\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ Boolean,\ Double,\ Integer,\ JSONArray,\ JSONObject,\ Long,\ or\r\n\ \ \ \ \ \ \ \ \ \ \ \ String,\ or\ the\ JSONObject.NULL\ object.\r\n\ @return\ this.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative\ or\ if\ the\ the\ value\ is\ an\ invalid\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ number.\r\n
comment51.params=jsonPointer
comment51.target=java.lang.Object\ query(java.lang.String)
comment51.text=\r\n\ Creates\ a\ JSONPointer\ using\ an\ initialization\ string\ and\ tries\ to\ \r\n\ match\ it\ to\ an\ item\ within\ this\ JSONArray.\ For\ example,\ given\ a\r\n\ JSONArray\ initialized\ with\ this\ document\:\r\n\ <pre>\r\n\ [\r\n\ \ \ \ \ {"b"\:"c"}\r\n\ ]\r\n\ </pre>\r\n\ and\ this\ JSONPointer\ string\:\ \r\n\ <pre>\r\n\ "/0/b"\r\n\ </pre>\r\n\ Then\ this\ method\ will\ return\ the\ String\ "c"\r\n\ A\ JSONPointerException\ may\ be\ thrown\ from\ code\ called\ by\ this\ method.\r\n\r\n\ @param\ jsonPointer\ string\ that\ can\ be\ used\ to\ create\ a\ JSONPointer\r\n\ @return\ the\ item\ matched\ by\ the\ JSONPointer,\ otherwise\ null\r\n
comment52.params=jsonPointer
comment52.target=java.lang.Object\ query(JSONPointer)
comment52.text=\r\n\ Uses\ a\ uaer\ initialized\ JSONPointer\ \ and\ tries\ to\ \r\n\ match\ it\ to\ an\ item\ whithin\ this\ JSONArray.\ For\ example,\ given\ a\r\n\ JSONArray\ initialized\ with\ this\ document\:\r\n\ <pre>\r\n\ [\r\n\ \ \ \ \ {"b"\:"c"}\r\n\ ]\r\n\ </pre>\r\n\ and\ this\ JSONPointer\:\ \r\n\ <pre>\r\n\ "/0/b"\r\n\ </pre>\r\n\ Then\ this\ method\ will\ return\ the\ String\ "c"\r\n\ A\ JSONPointerException\ may\ be\ thrown\ from\ code\ called\ by\ this\ method.\r\n\r\n\ @param\ jsonPointer\ string\ that\ can\ be\ used\ to\ create\ a\ JSONPointer\r\n\ @return\ the\ item\ matched\ by\ the\ JSONPointer,\ otherwise\ null\r\n
comment53.params=jsonPointer
comment53.target=java.lang.Object\ optQuery(java.lang.String)
comment53.text=\r\n\ Queries\ and\ returns\ a\ value\ from\ this\ object\ using\ {@code\ jsonPointer},\ or\r\n\ returns\ null\ if\ the\ query\ fails\ due\ to\ a\ missing\ key.\r\n\ \r\n\ @param\ jsonPointer\ the\ string\ representation\ of\ the\ JSON\ pointer\r\n\ @return\ the\ queried\ value\ or\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ jsonPointer}\ has\ invalid\ syntax\r\n
comment54.params=jsonPointer
comment54.target=java.lang.Object\ optQuery(JSONPointer)
comment54.text=\r\n\ Queries\ and\ returns\ a\ value\ from\ this\ object\ using\ {@code\ jsonPointer},\ or\r\n\ returns\ null\ if\ the\ query\ fails\ due\ to\ a\ missing\ key.\r\n\ \r\n\ @param\ The\ JSON\ pointer\r\n\ @return\ the\ queried\ value\ or\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ jsonPointer}\ has\ invalid\ syntax\r\n
comment55.params=index
comment55.target=java.lang.Object\ remove(int)
comment55.text=\r\n\ Remove\ an\ index\ and\ close\ the\ hole.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ of\ the\ element\ to\ be\ removed.\r\n\ @return\ The\ value\ that\ was\ associated\ with\ the\ index,\ or\ null\ if\ there\r\n\ \ \ \ \ \ \ \ \ was\ no\ value.\r\n
comment56.params=other
comment56.target=boolean\ similar(java.lang.Object)
comment56.text=\r\n\ Determine\ if\ two\ JSONArrays\ are\ similar.\r\n\ They\ must\ contain\ similar\ sequences.\r\n\r\n\ @param\ other\ The\ other\ JSONArray\r\n\ @return\ true\ if\ they\ are\ equal\r\n
comment57.params=names
comment57.target=JSONObject\ toJSONObject(org.json.JSONArray)
comment57.text=\r\n\ Produce\ a\ JSONObject\ by\ combining\ a\ JSONArray\ of\ names\ with\ the\ values\ of\r\n\ this\ JSONArray.\r\n\r\n\ @param\ names\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ JSONArray\ containing\ a\ list\ of\ key\ strings.\ These\ will\ be\r\n\ \ \ \ \ \ \ \ \ \ \ \ paired\ with\ the\ values.\r\n\ @return\ A\ JSONObject,\ or\ null\ if\ there\ are\ no\ names\ or\ if\ this\ JSONArray\r\n\ \ \ \ \ \ \ \ \ has\ no\ values.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ any\ of\ the\ names\ are\ null.\r\n
comment58.params=
comment58.target=java.lang.String\ toString()
comment58.text=\r\n\ Make\ a\ JSON\ text\ of\ this\ JSONArray.\ For\ compactness,\ no\ unnecessary\r\n\ whitespace\ is\ added.\ If\ it\ is\ not\ possible\ to\ produce\ a\ syntactically\r\n\ correct\ JSON\ text\ then\ null\ will\ be\ returned\ instead.\ This\ could\ occur\ if\r\n\ the\ array\ contains\ an\ invalid\ number.\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @return\ a\ printable,\ displayable,\ transmittable\ representation\ of\ the\r\n\ \ \ \ \ \ \ \ \ array.\r\n
comment59.params=indentFactor
comment59.target=java.lang.String\ toString(int)
comment59.text=\r\n\ Make\ a\ prettyprinted\ JSON\ text\ of\ this\ JSONArray.\ Warning\:\ This\ method\r\n\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @param\ indentFactor\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ number\ of\ spaces\ to\ add\ to\ each\ level\ of\ indentation.\r\n\ @return\ a\ printable,\ displayable,\ transmittable\ representation\ of\ the\r\n\ \ \ \ \ \ \ \ \ object,\ beginning\ with\ <code>[</code>&nbsp;<small>(left\r\n\ \ \ \ \ \ \ \ \ bracket)</small>\ and\ ending\ with\ <code>]</code>\r\n\ \ \ \ \ \ \ \ \ &nbsp;<small>(right\ bracket)</small>.\r\n\ @throws\ JSONException\r\n
comment6.params=index
comment6.target=java.lang.Object\ get(int)
comment6.text=\r\n\ Get\ the\ object\ value\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ An\ object\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ no\ value\ for\ the\ index.\r\n
comment60.params=writer
comment60.target=java.io.Writer\ write(java.io.Writer)
comment60.text=\r\n\ Write\ the\ contents\ of\ the\ JSONArray\ as\ JSON\ text\ to\ a\ writer.\ For\r\n\ compactness,\ no\ whitespace\ is\ added.\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @return\ The\ writer.\r\n\ @throws\ JSONException\r\n
comment61.params=writer\ indentFactor\ indent
comment61.target=java.io.Writer\ write(java.io.Writer,\ int,\ int)
comment61.text=\r\n\ Write\ the\ contents\ of\ the\ JSONArray\ as\ JSON\ text\ to\ a\ writer.\ For\r\n\ compactness,\ no\ whitespace\ is\ added.\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @param\ writer\r\n\ \ \ \ \ \ \ \ \ \ \ \ Writes\ the\ serialized\ JSON\r\n\ @param\ indentFactor\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ number\ of\ spaces\ to\ add\ to\ each\ level\ of\ indentation.\r\n\ @param\ indent\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ indention\ of\ the\ top\ level.\r\n\ @return\ The\ writer.\r\n\ @throws\ JSONException\r\n
comment62.params=
comment62.target=java.util.List\ toList()
comment62.text=\r\n\ Returns\ a\ java.util.List\ containing\ all\ of\ the\ elements\ in\ this\ array.\r\n\ If\ an\ element\ in\ the\ array\ is\ a\ JSONArray\ or\ JSONObject\ it\ will\ also\r\n\ be\ converted.\r\n\ <p>\r\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\r\n\r\n\ @return\ a\ java.util.List\ containing\ the\ elements\ of\ this\ array\r\n
comment7.params=index
comment7.target=boolean\ getBoolean(int)
comment7.text=\r\n\ Get\ the\ boolean\ value\ associated\ with\ an\ index.\ The\ string\ values\ "true"\r\n\ and\ "false"\ are\ converted\ to\ boolean.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ truth.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ no\ value\ for\ the\ index\ or\ if\ the\ value\ is\ not\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ convertible\ to\ boolean.\r\n
comment8.params=index
comment8.target=double\ getDouble(int)
comment8.text=\r\n\ Get\ the\ double\ value\ associated\ with\ an\ index.\r\n\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ value.\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ to\ a\ number.\r\n
comment9.params=clazz\ index
comment9.target=java.lang.Enum\ getEnum(java.lang.Class,\ int)
comment9.text=\r\n\ Get\ the\ enum\ value\ associated\ with\ an\ index.\r\n\ \r\n\ @param\ clazz\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ type\ of\ enum\ to\ retrieve.\r\n\ @param\ index\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\r\n\ @return\ The\ enum\ value\ at\ the\ index\ location\r\n\ @throws\ JSONException\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\r\n\ \ \ \ \ \ \ \ \ \ \ \ to\ an\ enum.\r\n
numComments=63
