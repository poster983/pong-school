#BlueJ class context
comment0.params=
comment0.target=org.json.JSONPointer.Builder\ builder()
comment0.text=\r\n\ Static\ factory\ method\ for\ {@link\ Builder}.\ Example\ usage\:\r\n\ \r\n\ <pre><code>\r\n\ JSONPointer\ pointer\ \=\ JSONPointer.builder()\r\n\ \ \ \ \ \ \ .append("obj")\r\n\ \ \ \ \ \ \ .append("other~key").append("another/key")\r\n\ \ \ \ \ \ \ .append("\\"")\r\n\ \ \ \ \ \ \ .append(0)\r\n\ \ \ \ \ \ \ .build();\r\n\ </code></pre>\r\n\ \r\n\ \ @return\ a\ builder\ instance\ which\ can\ be\ used\ to\ construct\ a\ {@code\ JSONPointer}\ instance\ by\ chained\r\n\ \ {@link\ Builder\#append(String)}\ calls.\r\n
comment1.params=pointer
comment1.target=JSONPointer(java.lang.String)
comment1.text=\r\n\ Pre-parses\ and\ initializes\ a\ new\ {@code\ JSONPointer}\ instance.\ If\ you\ want\ to\r\n\ evaluate\ the\ same\ JSON\ Pointer\ on\ different\ JSON\ documents\ then\ it\ is\ recommended\r\n\ to\ keep\ the\ {@code\ JSONPointer}\ instances\ due\ to\ performance\ considerations.\r\n\ \r\n\ @param\ pointer\ the\ JSON\ String\ or\ URI\ Fragment\ representation\ of\ the\ JSON\ pointer.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ pointer}\ is\ not\ a\ valid\ JSON\ pointer\r\n
comment2.params=refTokens
comment2.target=JSONPointer(java.util.List)
comment3.params=token
comment3.target=java.lang.String\ unescape(java.lang.String)
comment4.params=document
comment4.target=java.lang.Object\ queryFrom(java.lang.Object)
comment4.text=\r\n\ Evaluates\ this\ JSON\ Pointer\ on\ the\ given\ {@code\ document}.\ The\ {@code\ document}\r\n\ is\ usually\ a\ {@link\ JSONObject}\ or\ a\ {@link\ JSONArray}\ instance,\ but\ the\ empty\r\n\ JSON\ Pointer\ ({@code\ ""})\ can\ be\ evaluated\ on\ any\ JSON\ values\ and\ in\ such\ case\ the\r\n\ returned\ value\ will\ be\ {@code\ document}\ itself.\ \r\n\ \r\n\ @param\ document\ the\ JSON\ document\ which\ should\ be\ the\ subject\ of\ querying.\r\n\ @return\ the\ result\ of\ the\ evaluation\r\n\ @throws\ JSONPointerException\ if\ an\ error\ occurs\ during\ evaluation\r\n
comment5.params=current\ indexToken
comment5.target=java.lang.Object\ readByIndexToken(java.lang.Object,\ java.lang.String)
comment5.text=\r\n\ Matches\ a\ JSONArray\ element\ by\ ordinal\ position\r\n\ @param\ current\ the\ JSONArray\ to\ be\ evaluated\r\n\ @param\ indexToken\ the\ array\ index\ in\ string\ form\r\n\ @return\ the\ matched\ object.\ If\ no\ matching\ item\ is\ found\ a\r\n\ JSONPointerException\ is\ thrown\r\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\r\n\ Returns\ a\ string\ representing\ the\ JSONPointer\ path\ value\ using\ string\r\n\ representation\r\n
comment7.params=token
comment7.target=java.lang.String\ escape(java.lang.String)
comment7.text=\r\n\ Escapes\ path\ segment\ values\ to\ an\ unambiguous\ form.\r\n\ The\ escape\ char\ to\ be\ inserted\ is\ '~'.\ The\ chars\ to\ be\ escaped\ \r\n\ are\ ~,\ which\ maps\ to\ ~0,\ and\ /,\ which\ maps\ to\ ~1.\ Backslashes\r\n\ and\ double\ quote\ chars\ are\ also\ escaped.\r\n\ @param\ token\ the\ JSONPointer\ segment\ value\ to\ be\ escaped\r\n\ @return\ the\ escaped\ value\ for\ the\ token\r\n
comment8.params=
comment8.target=java.lang.String\ toURIFragment()
comment8.text=\r\n\ Returns\ a\ string\ representing\ the\ JSONPointer\ path\ value\ using\ URI\r\n\ fragment\ identifier\ representation\r\n
numComments=9
