#BlueJ class context
comment0.params=string
comment0.target=java.lang.Iterable\ codePointIterator(java.lang.String)
comment0.text=\r\n\ Creates\ an\ iterator\ for\ navigating\ Code\ Points\ in\ a\ string\ instead\ of\r\n\ characters.\ Once\ Java7\ support\ is\ dropped,\ this\ can\ be\ replaced\ with\r\n\ <code>\r\n\ string.codePoints()\r\n\ </code>\r\n\ which\ is\ available\ in\ Java8\ and\ above.\r\n\ \r\n\ @see\ <a\ href\=\r\n\ \ \ \ \ \ "http\://stackoverflow.com/a/21791059/6030888">http\://stackoverflow.com/a/21791059/6030888</a>\r\n
comment1.params=
comment1.target=java.util.Iterator\ iterator()
comment10.params=string
comment10.target=JSONObject\ toJSONObject(java.lang.String)
comment10.text=\r\n\ Convert\ a\ well-formed\ (but\ not\ necessarily\ valid)\ XML\ string\ into\ a\r\n\ JSONObject.\ Some\ information\ may\ be\ lost\ in\ this\ transformation\ because\r\n\ JSON\ is\ a\ data\ format\ and\ XML\ is\ a\ document\ format.\ XML\ uses\ elements,\r\n\ attributes,\ and\ content\ text,\ while\ JSON\ uses\ unordered\ collections\ of\r\n\ name/value\ pairs\ and\ arrays\ of\ values.\ JSON\ does\ not\ does\ not\ like\ to\r\n\ distinguish\ between\ elements\ and\ attributes.\ Sequences\ of\ similar\r\n\ elements\ are\ represented\ as\ JSONArrays.\ Content\ text\ may\ be\ placed\ in\ a\r\n\ "content"\ member.\ Comments,\ prologs,\ DTDs,\ and\ <code>&lt;[\ [\ ]]></code>\r\n\ are\ ignored.\r\n\ \r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ string.\r\n\ @return\ A\ JSONObject\ containing\ the\ structured\ data\ from\ the\ XML\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ errors\ while\ parsing\ the\ string\r\n
comment11.params=string\ keepStrings
comment11.target=JSONObject\ toJSONObject(java.lang.String,\ boolean)
comment11.text=\r\n\ Convert\ a\ well-formed\ (but\ not\ necessarily\ valid)\ XML\ string\ into\ a\r\n\ JSONObject.\ Some\ information\ may\ be\ lost\ in\ this\ transformation\ because\r\n\ JSON\ is\ a\ data\ format\ and\ XML\ is\ a\ document\ format.\ XML\ uses\ elements,\r\n\ attributes,\ and\ content\ text,\ while\ JSON\ uses\ unordered\ collections\ of\r\n\ name/value\ pairs\ and\ arrays\ of\ values.\ JSON\ does\ not\ does\ not\ like\ to\r\n\ distinguish\ between\ elements\ and\ attributes.\ Sequences\ of\ similar\r\n\ elements\ are\ represented\ as\ JSONArrays.\ Content\ text\ may\ be\ placed\ in\ a\r\n\ "content"\ member.\ Comments,\ prologs,\ DTDs,\ and\ <code>&lt;[\ [\ ]]></code>\r\n\ are\ ignored.\r\n\ \r\n\ All\ values\ are\ converted\ as\ strings,\ for\ 1,\ 01,\ 29.0\ will\ not\ be\ coerced\ to\r\n\ numbers\ but\ will\ instead\ be\ the\ exact\ value\ as\ seen\ in\ the\ XML\ document.\r\n\ \r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ string.\r\n\ @param\ keepStrings\ If\ true,\ then\ values\ will\ not\ be\ coerced\ into\ boolean\r\n\ \ or\ numeric\ values\ and\ will\ instead\ be\ left\ as\ strings\r\n\ @return\ A\ JSONObject\ containing\ the\ structured\ data\ from\ the\ XML\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ errors\ while\ parsing\ the\ string\r\n
comment12.params=object
comment12.target=java.lang.String\ toString(java.lang.Object)
comment12.text=\r\n\ Convert\ a\ JSONObject\ into\ a\ well-formed,\ element-normal\ XML\ string.\r\n\ \r\n\ @param\ object\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ JSONObject.\r\n\ @return\ A\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ error\ parsing\ the\ string\r\n
comment13.params=object\ tagName
comment13.target=java.lang.String\ toString(java.lang.Object,\ java.lang.String)
comment13.text=\r\n\ Convert\ a\ JSONObject\ into\ a\ well-formed,\ element-normal\ XML\ string.\r\n\ \r\n\ @param\ object\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ JSONObject.\r\n\ @param\ tagName\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ optional\ name\ of\ the\ enclosing\ tag.\r\n\ @return\ A\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ there\ is\ an\ error\ parsing\ the\ string\r\n
comment2.params=
comment2.target=boolean\ hasNext()
comment3.params=
comment3.target=java.lang.Integer\ next()
comment4.params=
comment4.target=void\ remove()
comment5.params=string
comment5.target=java.lang.String\ escape(java.lang.String)
comment5.text=\r\n\ Replace\ special\ characters\ with\ XML\ escapes\:\r\n\ \r\n\ <pre>\r\n\ &amp;\ <small>(ampersand)</small>\ is\ replaced\ by\ &amp;amp;\r\n\ &lt;\ <small>(less\ than)</small>\ is\ replaced\ by\ &amp;lt;\r\n\ &gt;\ <small>(greater\ than)</small>\ is\ replaced\ by\ &amp;gt;\r\n\ &quot;\ <small>(double\ quote)</small>\ is\ replaced\ by\ &amp;quot;\r\n\ &apos;\ <small>(single\ quote\ /\ apostrophe)</small>\ is\ replaced\ by\ &amp;apos;\r\n\ </pre>\r\n\ \r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ string\ to\ be\ escaped.\r\n\ @return\ The\ escaped\ string.\r\n
comment6.params=cp
comment6.target=boolean\ mustEscape(int)
comment6.text=\r\n\ @param\ cp\ code\ point\ to\ test\r\n\ @return\ true\ if\ the\ code\ point\ is\ not\ valid\ for\ an\ XML\r\n
comment7.params=string
comment7.target=java.lang.String\ unescape(java.lang.String)
comment7.text=\r\n\ Removes\ XML\ escapes\ from\ the\ string.\r\n\ \r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ string\ to\ remove\ escapes\ from\r\n\ @return\ string\ with\ converted\ entities\r\n
comment8.params=string
comment8.target=void\ noSpace(java.lang.String)
comment8.text=\r\n\ Throw\ an\ exception\ if\ the\ string\ contains\ whitespace.\ Whitespace\ is\ not\r\n\ allowed\ in\ tagNames\ and\ attributes.\r\n\ \r\n\ @param\ string\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ string.\r\n\ @throws\ JSONException\ Thrown\ if\ the\ string\ contains\ whitespace\ or\ is\ empty.\r\n
comment9.params=string
comment9.target=java.lang.Object\ stringToValue(java.lang.String)
comment9.text=\r\n\ This\ method\ is\ the\ same\ as\ {@link\ JSONObject.stringToValue(String)}\r\n\ except\ that\ this\ also\ tries\ to\ unescape\ String\ values.\r\n\ \r\n\ @param\ string\ String\ to\ convert\r\n\ @return\ JSON\ value\ of\ this\ string\ or\ the\ string\r\n
numComments=14
